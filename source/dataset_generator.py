#!/usr/bin/env python

"""
Generates a dataset file (.dat) for each of the JSON files produced by LiSa.  This file contains the first X (e.g., 50)
System Calls minus their input and return parameters.
"""

# Generic/Built-in
import argparse
import glob
import os
import datetime

# Libs
import pandas as pd
import simplejson

__author__ = "Fiona Walsh"
__version__ = "1.0.0"
__status__ = "Dev"


pd.io.json._json.loads = lambda s, *a, **kw: simplejson.loads(s)


def read_json_syscalls(json, args, now):
    """
    Reads Syscall data from a JSON file and saves it as an individual .DAT (dataset) file

    Args:
        json: JSON file with syscalls
        args: Benign or Malware flag
        now: Current date and time

    Returns:
        None
    """
    df = pd.read_json(json)
    syscall_names = df.dynamic_analysis.syscalls
    norm_table = pd.json_normalize(syscall_names)
    sys_rows = pd.DataFrame(norm_table["name"].values)
    sys_rows = sys_rows.iloc[: args.size].T
    sys_rows.columns = [
        "syscall" + str(i) for i in range(sys_rows.shape[1])
    ]  # name all columns as syscallN where N is the number of the syscall

    file_name = df.file_name.syscalls
    dataset = file_name + "_" + args.type + ".dat"
    sys_rows.to_csv(
        args.output + "/" + dataset, header=None, index=None, sep=" ", mode="w"
    )


if __name__ == "__main__":
    print("Running Script: {}".format(__file__))

    parser = argparse.ArgumentParser(
        prog=__file__,
        usage="%(prog)s [options]",
        description="Generates System Call datasets",
    )

    parser.add_argument("-i", "--input", help="Input directory")
    parser.add_argument("-o", "--output", help="Output directory")
    parser.add_argument(
        "-t", "--type", help="Sample type i.e. benign or malware family"
    )
    parser.add_argument("-s", "--size", help="Number of syscalls to use", type=int)

    args = parser.parse_args()

    print(
        "\n\nArguments:\t{}\n\n".format(
            "\n\t\t".join(f"{k}={v}" for k, v in vars(args).items())
        )
    )

    utc_time = datetime.datetime.utcnow()
    now = utc_time.strftime("%Y%m%d%H%M%S")

    count = 1
    for file in glob.glob(os.path.join(args.input, "*.json")):
        print("Reading log #{}: {}".format(count, file))
        read_json_syscalls(file, args, now)
        count += 1
