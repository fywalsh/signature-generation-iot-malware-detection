#!/usr/bin/env python

"""
Generates YARA signatures from a set of decision tree rules
"""

# Generic/Built-in
import argparse
import datetime
from pathlib import Path

__author__ = "Fiona Walsh"
__version__ = "1.0.0"
__status__ = "Dev"


def generate_signatures(arguments, rules):
    """
    Generates YARA signatures

    Args:
        arguments: Input Directory, Output Directly and Author
        rules: Latest decision tree rules

    Returns:
        None
    """
    utc_time = datetime.datetime.utcnow()

    # Reads in the decision tree rules file
    with open(rules) as rules_file:
        lines = rules_file.readlines()

    # Build a YARA signatures file
    signatures_file = arguments.output + rules.stem[:-20] + "_signatures.yar"
    with open(signatures_file, "w") as file:

        yara_rule_meta = (
            '\t\tauthor = "'
            + arguments.author
            + '"\n\t\tdate = "'
            + utc_time.strftime("%d/%m/%Y")
            + '"'
        )

        rule_count = 0
        for line in lines:
            # Create YARA signatures for malware only
            if "benign" not in line:
                yara_rule = line.split("and")
                yara_rule_condition = ""
                rule_count += 1
                yara_rule_name = "rule{}_{} ".format(
                    yara_rule[yara_rule.__len__() - 1][
                        str.find(yara_rule[yara_rule.__len__() - 1], ":") + 1 : -1
                    ],
                    rule_count,
                )
                file.write(yara_rule_name + "{\n")

                # Build 'meta' and 'strings' for YARA signature
                file.write("\tmeta:\n {}\n".format(yara_rule_meta))
                file.write("\tstrings:\n")

                # Build 'condition' for YARA signature
                for string_count in range(0, yara_rule.__len__()):
                    if str.find(yara_rule[string_count], "<") > 0:
                        yara_string = (
                            '$syscall_ngram_{} = "{}"'.format(
                                str(string_count + 1),
                                yara_rule[string_count][
                                    str.find(yara_rule[string_count], "(")
                                    + 1 : str.find(yara_rule[string_count], "<")
                                    - 1
                                ],
                            )
                            + "\n"
                        )
                        yara_rule_condition += (
                            "(not $syscall_ngram_{}".format(str(string_count + 1))
                            + ") and "
                        )
                    else:
                        yara_string = (
                            '$syscall_ngram_{} = "{}"'.format(
                                str(string_count + 1),
                                yara_rule[string_count][
                                    str.find(yara_rule[string_count], "(")
                                    + 1 : str.find(yara_rule[string_count], ">")
                                    - 1
                                ],
                            )
                            + "\n"
                        )
                        yara_rule_condition += (
                            "$syscall_ngram_{}".format(str(string_count + 1)) + " and "
                        )
                    file.write("\t\t" + yara_string)

                yara_rule_condition += "(filesize > 0)"
                file.write("\n\tcondition:\n")
                file.write("\t\t" + yara_rule_condition + "\n}\n\n")

    print(
        "Saved {} generated YARA Signatures to {}".format(
            rule_count, arguments.output + signatures_file
        )
    )


if __name__ == "__main__":
    print("Running Script: {}".format(__file__))

    parser = argparse.ArgumentParser(
        prog=__file__,
        usage="%(prog)s [options]",
        description="Performs signature generation",
    )

    parser = argparse.ArgumentParser()

    parser.add_argument("-i", "--input", help="Input directory")
    parser.add_argument("-o", "--output", help="Output directory")
    parser.add_argument("-a", "--author", help="Author", default="FWalsh")

    args = parser.parse_args()

    print(
        "Arguments:\t{}\n".format(
            "\n\t\t".join(f"{k}={v}" for k, v in vars(args).items())
        )
    )

    decision_tree_rules_files = Path(args.input).glob("*.txt")
    latest_decision_tree_rules = max(
        decision_tree_rules_files, key=lambda f: f.stat().st_mtime
    )

    print("Processing file: {}\n".format(latest_decision_tree_rules))

    generate_signatures(args, latest_decision_tree_rules)
