#!/usr/bin/env python

"""
Performs malware detection on System Call Dataset files using YARA signatures
"""

# Generic/Built-in
import argparse
import glob
import os
from pathlib import Path

# Libs
import yara

__author__ = "Fiona Walsh"
__version__ = "1.0.0"
__status__ = "Dev"


def perform_mal_detection(arguments, signatures):
    """
    Performs Malware Detection using generated YARA signatures

    Args:
        arguments: Input and output directories
        signatures: Directory holding latest generated signatures

    Returns:
        None
    """
    # Compile YARA signatures and raise any errors found
    yara_signatures = yara.compile(str(signatures))

    total_benign_count = 0
    total_malware_count = 0
    overall_tp_count = 0
    overall_fp_count = 0
    overall_tn_count = 0
    overall_fn_count = 0

    print("Matching source files to YARA signatures......")
    with open(arguments.output + "yara_match_results.txt", "a") as yara_results_file:
        input_files = glob.glob(os.path.join(arguments.input, "*.dat"))
        for file in input_files:
            filetype = file[file.rfind("_") + 1 : -4]

            if filetype == "benign":
                total_benign_count += 1
            else:
                total_malware_count += 1

            with open(file, "rb") as f:
                # Check for any matches to the auto-generated YARA signatures and record the results
                matches = yara_signatures.match(data=f.read())
                if len(matches) > 0:
                    yara_results_file.write(
                        "{} matches the following YARA rule(s): {}\n".format(
                            file, matches
                        )
                    )
                    if filetype == "benign":
                        overall_fp_count += 1
                    else:
                        overall_tp_count += 1
                else:
                    yara_results_file.write(
                        "{} does not match any YARA signatures.\n".format(file)
                    )
                    if filetype == "benign":
                        overall_tn_count += 1
                    else:
                        overall_fn_count += 1
    print("Results saved to {}".format(args.output + "yara_match_results.txt"))
    print("\n################### - RESULTS - #####################")
    print(
        "Actual Malware Count: {} | Actual Benign Count: {}\n".format(
            total_malware_count, total_benign_count
        )
    )
    print(
        "TP (True Positive) Count: {}, TPR: {}".format(
            overall_tp_count,
            "{:.2%}".format((overall_tp_count / (overall_tp_count + overall_fn_count))),
        )
    )
    print(
        "TN (True Negative) Count: {}, TNR: {}".format(
            overall_tn_count,
            "{:.2%}".format((overall_tn_count / (overall_tn_count + overall_fp_count))),
        )
    )
    print(
        "FP (False Positive) Count: {}, FPR: {}".format(
            overall_fp_count,
            "{:.2%}".format((overall_fp_count / (overall_tn_count + overall_fp_count))),
        )
    )
    print(
        "FN (False Negative) Count: {}, FNR: {}".format(
            overall_fn_count,
            "{:.2%}".format((overall_fn_count / (overall_tp_count + overall_fn_count))),
        )
    )
    print("#####################################################")


if __name__ == "__main__":
    print("Running Script: {}".format(__file__))

    parser = argparse.ArgumentParser(
        prog=__file__,
        usage="%(prog)s [options]",
        description="Performs malware detection",
    )

    parser = argparse.ArgumentParser()

    parser.add_argument("-i", "--input", help="Input directory")
    parser.add_argument("-o", "--output", help="Output directory")
    parser.add_argument("-s", "--signatures", help="Signatures directory")

    args = parser.parse_args()

    print(
        "Arguments:\t{}\n".format(
            "\n\t\t".join(f"{k}={v}" for k, v in vars(args).items())
        )
    )

    signature_files = Path(args.signatures).glob("*.yar")
    latest_signatures = max(signature_files, key=lambda f: f.stat().st_mtime)

    print("Processing file: {}\n".format(latest_signatures))

    perform_mal_detection(args, latest_signatures)
