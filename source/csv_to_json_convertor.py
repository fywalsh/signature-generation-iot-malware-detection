#!/usr/bin/env python

"""
Converts the CSV output from VirusTotal to a JSON file in the required format for AVClass2.
"""

# Generic/Built-in
import argparse
import glob
import os
import csv
import json

__author__ = "Fiona Walsh"
__version__ = "1.0.0"
__status__ = "Dev"


def convert_to_json_file(csvFilePath, jsonFilePath):
    """
    Convert CSV file to JSON file with specific format for AVClass2

    Args:
        csvFilePath: File path for input CSV file
        jsonFilePath: File path for output JSON file

    Returns:
        None
    """
    if os.path.isfile(jsonFilePath):
        os.remove(jsonFilePath)

    # create new json file
    jsonFile = open(jsonFilePath, "a")

    # read csv file and add to data
    data = {}
    with open(csvFilePath) as csvFile:
        csvReader = csv.DictReader(csvFile, delimiter=";")
        for csvRow in csvReader:
            if csvRow["Response"] == "1":
                data["sha1"] = csvRow["sha1"]
                data["av_labels"] = extract_av_results(csvRow["AVs"])
                data["scan_date"] = csvRow["Scan Date"]
                data["sha256"] = csvRow["sha256"]
                data["md5"] = csvRow["md5"]

                # write data to it
                jsonFile.write(json.dumps(data) + "\n")

    # close file
    jsonFile.close()


def extract_av_results(av_results):
    """
    Extract Anti-Virus engine details

    Args:
        av_results: String of AV engine details

    Returns:
        extracted_av_results: Separated AV engine details
    """
    extracted_av_results = []
    raw_av_results = av_results.split(",")

    for av_result in raw_av_results:
        extracted_av_results.append(av_result.split("#"))
    return extracted_av_results


if __name__ == "__main__":
    print("Running Script: {}".format(__file__))

    parser = argparse.ArgumentParser(
        prog=__file__,
        usage="%(prog)s [options]",
        description="Converts CSV files to JSON files",
    )

    # -i inputDir -o outputDir
    parser.add_argument("-i", "--input", help="Input directory")
    parser.add_argument("-o", "--output", help="Output directory")

    args = parser.parse_args()

    count = 1
    for file in glob.glob(os.path.join(args.input, "*.csv")):
        print("Reading csv #{}: {}".format(count, file))
        convert_to_json_file(
            file, args.output + file[file.rfind("/") + 1 : -4] + ".json"
        )
        count += 1
